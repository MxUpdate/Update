/* Generated By:JavaCC: Do not edit this line. PolicyDefParser.java */
package org.mxupdate.update.datamodel.policy;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.mxupdate.mapping.TypeDef_mxJPO;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.datamodel.Policy_mxJPO;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Access;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Prefix;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.ParameterCache_mxJPO;

public class PolicyDefParser_mxJPO
    extends AbstractParser_mxJPO implements PolicyDefParserConstants_mxJPO {

/**
 * Parses one complete policy definition.
 *
 * @param _paramCache   parameter cache
 * @param _typeDef      type definition of the policy (to instantiate the
 *                      policy)
 * @param _mxName       MX name of the policy
 */
  final public Policy_mxJPO policy(final ParameterCache_mxJPO _paramCache,
                    final TypeDef_mxJPO _typeDef,
                    final String _mxName) throws ParseException_mxJPO, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
    final Policy_mxJPO policy = (Policy_mxJPO) _typeDef.newTypeInstance(_mxName);
    String tmp;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
      case TYPE:
      case FORMAT:
      case STORE:
      case DEFAULTFORMAT:
      case ENFORCE:
      case DELIMITER:
      case SEQUENCE:
      case MINORSEQUENCE:
      case MAJORSEQUENCE:
      case HIDDEN:
      case STATE:
      case ALLSTATE:
        ;
        break;
      default:
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
        jj_consume_token(DESCRIPTION);
        tmp = sString();
                                                this.getField(policy, "description").set(tmp);
        break;
      case FORMAT:
        format(policy);
        break;
      case TYPE:
        type(policy);
        break;
      case DEFAULTFORMAT:
        jj_consume_token(DEFAULTFORMAT);
        tmp = sString();
                                                this.getField(policy, "defaultFormat").set(tmp);
        break;
      case ENFORCE:
        jj_consume_token(ENFORCE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_TRUE:
          jj_consume_token(BOOLEAN_TRUE);
                                                this.getField(policy, "enforce").set(true);
          break;
        case BOOLEAN_FALSE:
          jj_consume_token(BOOLEAN_FALSE);
                                                this.getField(policy, "enforce").set(false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case DELIMITER:
        jj_consume_token(DELIMITER);
        tmp = sString();
                                                this.getField(policy, "delimiter").set(tmp);
        break;
      case SEQUENCE:
        jj_consume_token(SEQUENCE);
        tmp = sString();
                                                this.getField(policy, "minorsequence").set(tmp);
        break;
      case MINORSEQUENCE:
        jj_consume_token(MINORSEQUENCE);
        tmp = sString();
                                                this.getField(policy, "minorsequence").set(tmp);
        break;
      case MAJORSEQUENCE:
        jj_consume_token(MAJORSEQUENCE);
        tmp = sString();
                                                this.getField(policy, "majorsequence").set(tmp);
        break;
      case STORE:
        jj_consume_token(STORE);
        tmp = sString();
                                                this.getField(policy, "store").set(tmp);
        break;
      case HIDDEN:
        jj_consume_token(HIDDEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_TRUE:
          jj_consume_token(BOOLEAN_TRUE);
                                                this.getField(policy, "hidden").set(true);
          break;
        case BOOLEAN_FALSE:
          jj_consume_token(BOOLEAN_FALSE);
                                                this.getField(policy, "hidden").set(false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case ALLSTATE:
        allstate(policy);
        break;
      case STATE:
        state(policy);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
        this.prepareObject(_paramCache, policy);
        {if (true) return policy;}
    throw new Error("Missing return statement in function");
  }

/**
 * Format of a policy definition.
 *
 * @param _policy   current parsed policy
 */
  final public void format(final Policy_mxJPO _policy) throws ParseException_mxJPO {
    Set<String> set;
    jj_consume_token(FORMAT);
    if (jj_2_1(2)) {
      jj_consume_token(LALL_ALL);
                      set = new HashSet<String>();set.add("all");
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LALL_CURLY_BRACKET_OPEN:
      case L_CURLY_BRACKET_OPEN:
        set = lList();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
        this.getField(_policy, "formats").set(set);
  }

/**
 * Format of a type definition.
 *
 * @param _policy   current parsed policy
 */
  final public void type(final Policy_mxJPO _policy) throws ParseException_mxJPO {
    Set<String> set;
    jj_consume_token(TYPE);
    if (jj_2_2(2)) {
      jj_consume_token(LALL_ALL);
                      set = new HashSet<String>();set.add("all");
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LALL_CURLY_BRACKET_OPEN:
      case L_CURLY_BRACKET_OPEN:
        set = lList();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
        this.getField(_policy, "types").set(set);
  }

/**
 * Parses the all state definition.
 *
 * @param _policy   policy for which the all state definition is parsed
 */
  final public void allstate(final Policy_mxJPO _policy) throws ParseException_mxJPO {
    final AccessList_mxJPO accessList = this.getField(_policy, "allStateAccess").<AccessList_mxJPO>get();
    jj_consume_token(ALLSTATE);
    jj_consume_token(140);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REVOKE:
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case USER:
        ;
        break;
      default:
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OWNER:
        stateOwnerAccess(Prefix.All, accessList);
        break;
      case PUBLIC:
        statePublicAccess(Prefix.All, accessList);
        break;
      case USER:
        stateUserAccess(Prefix.All, accessList);
        break;
      case REVOKE:
        jj_consume_token(REVOKE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OWNER:
          stateOwnerAccess(Prefix.Revoke, accessList);
          break;
        case PUBLIC:
          statePublicAccess(Prefix.Revoke, accessList);
          break;
        case USER:
          stateUserAccess(Prefix.Revoke, accessList);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case LOGIN:
        jj_consume_token(LOGIN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OWNER:
          stateOwnerAccess(Prefix.Login,  accessList);
          break;
        case PUBLIC:
          statePublicAccess(Prefix.Login,  accessList);
          break;
        case USER:
          stateUserAccess(Prefix.Login,  accessList);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
    jj_consume_token(141);
        this.getField(_policy, "allState").set(true);
  }

/**
 * Parses one state definition.
 *
 * @param _policy   policy for which the all state definition is parsed
 */
  final public void state(final Policy_mxJPO _policy) throws ParseException_mxJPO {
    final Policy_mxJPO.State state = new Policy_mxJPO.State();
    String tmpStr;
    Set<String> tmpSet;
    jj_consume_token(STATE);
    tmpStr = sString();
                                this.getField(state, "name").set(tmpStr);
    jj_consume_token(140);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTEREDNAME:
      case REVISION:
      case MINORREVISION:
      case MAJORREVISION:
      case VERSION:
      case PROMOTE:
      case CHECKOUTHISTORY:
      case PUBLISHED:
      case REVOKE:
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case USER:
      case ACTION:
      case CHECK:
      case TRIGGER:
      case SIGNATURE:
      case ROUTE:
        ;
        break;
      default:
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTEREDNAME:
        jj_consume_token(REGISTEREDNAME);
        tmpStr = sString();
                                                     this.appendValue(state, "symbolicNames", tmpStr);
        break;
      case REVISION:
        jj_consume_token(REVISION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_TRUE:
          jj_consume_token(BOOLEAN_TRUE);
                                                     this.getField(state, "minorrevisionable").set(true);
          break;
        case BOOLEAN_FALSE:
          jj_consume_token(BOOLEAN_FALSE);
                                                     this.getField(state, "minorrevisionable").set(false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case MINORREVISION:
        jj_consume_token(MINORREVISION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_TRUE:
          jj_consume_token(BOOLEAN_TRUE);
                                                     this.getField(state, "minorrevisionable").set(true);
          break;
        case BOOLEAN_FALSE:
          jj_consume_token(BOOLEAN_FALSE);
                                                     this.getField(state, "minorrevisionable").set(false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case MAJORREVISION:
        jj_consume_token(MAJORREVISION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_TRUE:
          jj_consume_token(BOOLEAN_TRUE);
                                                     this.getField(state, "majorrevisionable").set(true);
          break;
        case BOOLEAN_FALSE:
          jj_consume_token(BOOLEAN_FALSE);
                                                     this.getField(state, "majorrevisionable").set(false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case VERSION:
        jj_consume_token(VERSION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_TRUE:
          jj_consume_token(BOOLEAN_TRUE);
                                                     this.getField(state, "versionable").set(true);
          break;
        case BOOLEAN_FALSE:
          jj_consume_token(BOOLEAN_FALSE);
                                                     this.getField(state, "versionable").set(false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case PROMOTE:
        jj_consume_token(PROMOTE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_TRUE:
          jj_consume_token(BOOLEAN_TRUE);
                                                     this.getField(state, "autoPromotion").set(true);
          break;
        case BOOLEAN_FALSE:
          jj_consume_token(BOOLEAN_FALSE);
                                                     this.getField(state, "autoPromotion").set(false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case CHECKOUTHISTORY:
        jj_consume_token(CHECKOUTHISTORY);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_TRUE:
          jj_consume_token(BOOLEAN_TRUE);
                                                     this.getField(state, "checkoutHistory").set(true);
          break;
        case BOOLEAN_FALSE:
          jj_consume_token(BOOLEAN_FALSE);
                                                     this.getField(state, "checkoutHistory").set(false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case PUBLISHED:
        jj_consume_token(PUBLISHED);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_TRUE:
          jj_consume_token(BOOLEAN_TRUE);
                                                     this.getField(state, "published").set(true);
          break;
        case BOOLEAN_FALSE:
          jj_consume_token(BOOLEAN_FALSE);
                                                     this.getField(state, "published").set(false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case OWNER:
        stateOwnerAccess(Prefix.All, state);
        break;
      case PUBLIC:
        statePublicAccess(Prefix.All, state);
        break;
      case USER:
        stateUserAccess(Prefix.All, state);
        break;
      case REVOKE:
        jj_consume_token(REVOKE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OWNER:
          stateOwnerAccess(Prefix.Revoke, state);
          break;
        case PUBLIC:
          statePublicAccess(Prefix.Revoke, state);
          break;
        case USER:
          stateUserAccess(Prefix.Revoke, state);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case LOGIN:
        jj_consume_token(LOGIN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OWNER:
          stateOwnerAccess(Prefix.Login,  state);
          break;
        case PUBLIC:
          statePublicAccess(Prefix.Login,  state);
          break;
        case USER:
          stateUserAccess(Prefix.Login,  state);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case ACTION:
        jj_consume_token(ACTION);
        tmpStr = sString();
                                                     this.getField(state, "actionProgram").set(tmpStr);
        jj_consume_token(INPUT);
        tmpStr = sString();
                                                     this.getField(state, "actionInput").set(tmpStr);
        break;
      case CHECK:
        jj_consume_token(CHECK);
        tmpStr = sString();
                                                     this.getField(state, "checkProgram").set(tmpStr);
        jj_consume_token(INPUT);
        tmpStr = sString();
                                                     this.getField(state, "checkInput").set(tmpStr);
        break;
      case ROUTE:
        jj_consume_token(ROUTE);
        tmpSet = lsList();
                                                     this.getField(state, "routeUsers").set(tmpSet);
        tmpStr = sString();
                                                     this.getField(state, "routeMessage").set(tmpStr);
        break;
      case TRIGGER:
        stateTrigger(state);
        break;
      case SIGNATURE:
        stateSignature(state);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
    jj_consume_token(141);
        this.appendValue(_policy, "states", state);
  }

/**
 * Parses the access and filter expression for the owner definition.
 *
 * @param _prefix   access filter prefix
 * @param _access   current parsed access definition of the policy
 */
  final public void stateOwnerAccess(final Prefix _prefix, final AccessList_mxJPO _accessList) throws ParseException_mxJPO {
    final Access access = new Access();
    jj_consume_token(OWNER);
    stateAccessDef(access);
        this.getField(access, "prefix").set(_prefix);
        this.getField(access, "kind").set("owner");
        ((Collection<Access>)(this.getValue(_accessList, "accessList"))).add(access);
  }

/**
 * Parses the access and filter expression for the public definition.
 *
 * @param _prefix   access filter prefix
 * @param _access   current parsed access definition of the policy
 */
  final public void statePublicAccess(final Prefix _prefix, final AccessList_mxJPO _accessList) throws ParseException_mxJPO {
    final Access access = new Access();
    jj_consume_token(PUBLIC);
    stateAccessDef(access);
        this.getField(access, "prefix").set(_prefix);
        this.getField(access, "kind").set("public");
        ((Collection<Access>)(this.getValue(_accessList, "accessList"))).add(access);
  }

/**
 * Parses the access and filter expression for a user definition.
 *
 * @param _prefix   access filter prefix
 * @param _access   current parsed access definition of the policy
 */
  final public void stateUserAccess(final Prefix _prefix, final AccessList_mxJPO _accessList) throws ParseException_mxJPO {
    final Access access = new Access();
    String user;
    jj_consume_token(USER);
    user = sString();
    stateAccessDef(access);
        this.getField(access, "prefix").set(_prefix);
        this.getField(access, "kind").set("user");
        this.getField(access, "userRef").set(user);
        ((Collection<Access>)(this.getValue(_accessList, "accessList"))).add(access);
  }

  final public void stateAccessDef(final Access _access) throws ParseException_mxJPO {
    String key = null, filter = null, localfilter = null, organization = null, project = null, owner = null, reserve = null, maturity = null, category = null;
    Token_mxJPO access = null;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
      case FILTER:
      case LOCALFILTER:
      case ACCESS:
      case ORGANIZATION_ANY:
      case ORGANIZATION_SINGLE:
      case ORGANIZATION_ANCESTOR:
      case ORGANIZATION_DESCENDANT:
      case ORGANIZATION_RELATED:
      case PROJECT_ANY:
      case PROJECT_SINGLE:
      case PROJECT_ANCESTOR:
      case PROJECT_DESCENDANT:
      case PROJECT_RELATED:
      case OWNER_ANY:
      case OWNER_CONTEXT:
      case RESERVE_ANY:
      case RESERVE_CONTEXT:
      case RESERVE_NO:
      case RESERVE_INCLUSIVE:
      case MATURITY_ANY:
      case MATURITY_NO:
      case MATURITY_PUBLIC:
      case MATURITY_PROTECTED:
      case MATURITY_PRIVATE:
      case MATURITY_NOTPRIVATE:
      case MATURITY_PPP:
      case CATEGORY_ANY:
      case CATEGORY_OEM:
      case CATEGORY_GOLDPARTNER:
      case CATEGORY_PARTNER:
      case CATEGORY_SUPPLIER:
      case CATEGORY_CUSTOMER:
      case CATEGORY_CONTRACTOR:
        ;
        break;
      default:
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
        jj_consume_token(KEY);
        key = sString();
        break;
      case FILTER:
        jj_consume_token(FILTER);
        filter = sString();
        break;
      case LOCALFILTER:
        jj_consume_token(LOCALFILTER);
        localfilter = sString();
        break;
      case ACCESS:
        access = jj_consume_token(ACCESS);
        break;
      case ORGANIZATION_ANY:
        jj_consume_token(ORGANIZATION_ANY);
                                       organization = "any";
        break;
      case ORGANIZATION_SINGLE:
        jj_consume_token(ORGANIZATION_SINGLE);
                                       organization = "single";
        break;
      case ORGANIZATION_ANCESTOR:
        jj_consume_token(ORGANIZATION_ANCESTOR);
                                       organization = "ancestor";
        break;
      case ORGANIZATION_DESCENDANT:
        jj_consume_token(ORGANIZATION_DESCENDANT);
                                       organization = "descendant";
        break;
      case ORGANIZATION_RELATED:
        jj_consume_token(ORGANIZATION_RELATED);
                                       organization = "related";
        break;
      case PROJECT_ANY:
        jj_consume_token(PROJECT_ANY);
                                       project      = "any";
        break;
      case PROJECT_SINGLE:
        jj_consume_token(PROJECT_SINGLE);
                                       project      = "single";
        break;
      case PROJECT_ANCESTOR:
        jj_consume_token(PROJECT_ANCESTOR);
                                       project      = "ancestor";
        break;
      case PROJECT_DESCENDANT:
        jj_consume_token(PROJECT_DESCENDANT);
                                       project      = "descendant";
        break;
      case PROJECT_RELATED:
        jj_consume_token(PROJECT_RELATED);
                                       project      = "related";
        break;
      case OWNER_ANY:
        jj_consume_token(OWNER_ANY);
                                       owner        = "any";
        break;
      case OWNER_CONTEXT:
        jj_consume_token(OWNER_CONTEXT);
                                       owner        = "context";
        break;
      case RESERVE_ANY:
        jj_consume_token(RESERVE_ANY);
                                       reserve      = "any";
        break;
      case RESERVE_CONTEXT:
        jj_consume_token(RESERVE_CONTEXT);
                                       reserve      = "context";
        break;
      case RESERVE_NO:
        jj_consume_token(RESERVE_NO);
                                       reserve      = "no";
        break;
      case RESERVE_INCLUSIVE:
        jj_consume_token(RESERVE_INCLUSIVE);
                                       reserve      = "inclusive";
        break;
      case MATURITY_ANY:
        jj_consume_token(MATURITY_ANY);
                                       maturity     = "any";
        break;
      case MATURITY_NO:
        jj_consume_token(MATURITY_NO);
                                       maturity     = "no";
        break;
      case MATURITY_PUBLIC:
        jj_consume_token(MATURITY_PUBLIC);
                                       maturity     = "public";
        break;
      case MATURITY_PROTECTED:
        jj_consume_token(MATURITY_PROTECTED);
                                       maturity     = "protected";
        break;
      case MATURITY_PRIVATE:
        jj_consume_token(MATURITY_PRIVATE);
                                       maturity     = "private";
        break;
      case MATURITY_NOTPRIVATE:
        jj_consume_token(MATURITY_NOTPRIVATE);
                                       maturity     = "notprivate";
        break;
      case MATURITY_PPP:
        jj_consume_token(MATURITY_PPP);
                                       maturity     = "ppp";
        break;
      case CATEGORY_ANY:
        jj_consume_token(CATEGORY_ANY);
                                       category     = "any";
        break;
      case CATEGORY_OEM:
        jj_consume_token(CATEGORY_OEM);
                                       category     = "oem";
        break;
      case CATEGORY_GOLDPARTNER:
        jj_consume_token(CATEGORY_GOLDPARTNER);
                                       category     = "goldpartner";
        break;
      case CATEGORY_PARTNER:
        jj_consume_token(CATEGORY_PARTNER);
                                       category     = "partner";
        break;
      case CATEGORY_SUPPLIER:
        jj_consume_token(CATEGORY_SUPPLIER);
                                       category     = "supplier";
        break;
      case CATEGORY_CUSTOMER:
        jj_consume_token(CATEGORY_CUSTOMER);
                                       category     = "customer";
        break;
      case CATEGORY_CONTRACTOR:
        jj_consume_token(CATEGORY_CONTRACTOR);
                                       category     = "contractor";
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
        this.getField(_access, "key").set(key);
        this.getField(_access, "filter").set(filter);
        this.getField(_access, "localfilter").set(localfilter);
        this.getField(_access, "organization").set(organization);
        this.getField(_access, "project").set(project);
        this.getField(_access, "owner").set(owner);
        this.getField(_access, "reserve").set(reserve);
        this.getField(_access, "maturity").set(maturity);
        this.getField(_access, "category").set(category);

        if (access == null)  {
            this.getField(_access, "access").set(new HashSet<String>());
        } else  {
            final String tmp = access.image
                    .replaceFirst("^\u005c\u005c{", "").replaceFirst("\u005c\u005c}$", "")  // remove {}
                    .replaceAll("(\u005ct)|(\u005cn)", " ")                       // replace tabs, new lines
                    .replaceAll("( )+", " ")                            // multiple spaces => one space
                    .trim();                                            // remove trailing spaces
            this.getField(_access, "access").set(new HashSet<String>(Arrays.asList(tmp.split(" "))));
        }
  }

  final public void stateTrigger(final Policy_mxJPO.State _state) throws ParseException_mxJPO {
    final Trigger trigger = new Trigger();
    String tmp;
    jj_consume_token(TRIGGER);
    tmp = sString();
                                     this.setValue(trigger, "eventType", tmp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACTION:
      jj_consume_token(ACTION);
                                     this.setValue(trigger, "kind", "action");
      break;
    case CHECK:
      jj_consume_token(CHECK);
                                     this.setValue(trigger, "kind", "check");
      break;
    case OVERRIDE:
      jj_consume_token(OVERRIDE);
                                     this.setValue(trigger, "kind", "override");
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException_mxJPO();
    }
    tmp = sString();
                                     this.setValue(trigger, "program", tmp);
    jj_consume_token(INPUT);
    tmp = sString();
                                     this.setValue(trigger, "arguments", tmp);
        this.appendValue(this.getValue(_state, "triggers"), "triggersStack", trigger);
  }

  final public void stateSignature(final Policy_mxJPO.State _state) throws ParseException_mxJPO {
    final Policy_mxJPO.Signature signature = new Policy_mxJPO.Signature();
    String tmpStr;
    Set<String> tmpSet;
    jj_consume_token(SIGNATURE);
    tmpStr = sString();
                                    this.getField(signature, "name").set(tmpStr);
    jj_consume_token(140);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILTER:
      case APPROVE:
      case IGNORE:
      case REJECT:
      case BRANCH:
        ;
        break;
      default:
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRANCH:
        jj_consume_token(BRANCH);
        tmpStr = sString();
                                         this.getField(signature, "branch").set(tmpStr);
        break;
      case APPROVE:
        jj_consume_token(APPROVE);
        tmpSet = lList();
                                         this.getField(signature, "approverUsers").set(tmpSet);
        break;
      case IGNORE:
        jj_consume_token(IGNORE);
        tmpSet = lList();
                                         this.getField(signature, "ignoreUsers").set(tmpSet);
        break;
      case REJECT:
        jj_consume_token(REJECT);
        tmpSet = lList();
                                         this.getField(signature, "rejectUsers").set(tmpSet);
        break;
      case FILTER:
        jj_consume_token(FILTER);
        tmpStr = sString();
                                         this.getField(signature, "filter").set(tmpStr);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
    jj_consume_token(141);
        this.appendValue(_state, "signatures", signature);
  }

  final public Set<String> lsList() throws ParseException_mxJPO {
    Token_mxJPO tmp;
    Set<String> ret = new HashSet<String>();
    jj_consume_token(LS_CURLY_BRACKET_OPEN);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LS_STRING:
      case LS_SINGLE_STRING:
        ;
        break;
      default:
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LS_STRING:
        tmp = jj_consume_token(LS_STRING);
                                             ret.add(this.getString(tmp.image));
        break;
      case LS_SINGLE_STRING:
        tmp = jj_consume_token(LS_SINGLE_STRING);
                                             ret.add(this.getSingle(tmp.image));
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
    jj_consume_token(LS_CURLY_BRACKET_CLOSE);
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Set<String> lList() throws ParseException_mxJPO {
    Token_mxJPO tmp;
    Set<String> ret = new HashSet<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_CURLY_BRACKET_OPEN:
      jj_consume_token(L_CURLY_BRACKET_OPEN);
      break;
    case LALL_CURLY_BRACKET_OPEN:
      jj_consume_token(LALL_CURLY_BRACKET_OPEN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException_mxJPO();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_STRING:
      case L_SINGLE_STRING:
      case L2_CURLY_BRACKET_OPEN:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_STRING:
        tmp = jj_consume_token(L_STRING);
                                    ret.add(this.getString(tmp.image));
        break;
      case L_SINGLE_STRING:
        tmp = jj_consume_token(L_SINGLE_STRING);
                                           ret.add(this.getSingle(tmp.image));
        break;
      case L2_CURLY_BRACKET_OPEN:
        jj_consume_token(L2_CURLY_BRACKET_OPEN);
        tmp = jj_consume_token(L3_BRACE_STRING);
                     ret.add(tmp.image);
        jj_consume_token(L4_CURLY_BRACKET_CLOSE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
    jj_consume_token(L_CURLY_BRACKET_CLOSE);
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * Evaluates a simple string where a list must follow.
 *
 * @return evaluated simple string
 */
  final public String slString() throws ParseException_mxJPO {
    Token_mxJPO tmp;
    String ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SL_STRING:
      tmp = jj_consume_token(SL_STRING);
                                     ret = this.getString(tmp.image);
      break;
    case SL_SINGLE_STRING:
      tmp = jj_consume_token(SL_SINGLE_STRING);
                                     ret = this.getSingle(tmp.image);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException_mxJPO();
    }
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * Evaluates a simple string.
 *
 * @return evaluated simple string
 */
  final public String sString() throws ParseException_mxJPO {
    Token_mxJPO tmp;
    String ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_STRING:
      tmp = jj_consume_token(S_STRING);
                                       ret = this.getString(tmp.image);
      break;
    case S_SINGLE_STRING:
      tmp = jj_consume_token(S_SINGLE_STRING);
                                       ret = this.getSingle(tmp.image);
      break;
    case DELIMITER_CHAR:
      tmp = jj_consume_token(DELIMITER_CHAR);
                                       ret = this.getSingle(tmp.image);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException_mxJPO();
    }
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(LALL_ALL)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LALL_ALL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PolicyDefParserTokenManager_mxJPO token_source;
  SimpleCharStream_mxJPO jj_input_stream;
  /** Current token. */
  public Token_mxJPO token;
  /** Next token. */
  public Token_mxJPO jj_nt;
  private int jj_ntk;
  private Token_mxJPO jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public PolicyDefParser_mxJPO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PolicyDefParser_mxJPO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream_mxJPO(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PolicyDefParserTokenManager_mxJPO(jj_input_stream);
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Constructor. */
  public PolicyDefParser_mxJPO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream_mxJPO(stream, 1, 1);
    token_source = new PolicyDefParserTokenManager_mxJPO(jj_input_stream);
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public PolicyDefParser_mxJPO(PolicyDefParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(PolicyDefParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  private Token_mxJPO jj_consume_token(int kind) throws ParseException_mxJPO {
    Token_mxJPO oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token_mxJPO getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token_mxJPO getToken(int index) {
    Token_mxJPO t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException_mxJPO generateParseException() {
    Token_mxJPO errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException_mxJPO("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
