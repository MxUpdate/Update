/*
 * Copyright 2008-2014 The MxUpdate Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

options {
  JDK_VERSION = "1.5";
  STATIC = false;
  ERROR_REPORTING = false;
  USER_TOKEN_MANAGER = false;
//  USER_CHAR_STREAM = true;
//  OPTIMIZE_TOKEN_MANAGER = true;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(PolicyDefParser)

package org.mxupdate.update.datamodel.policy;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.mxupdate.mapping.TypeDef_mxJPO;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.datamodel.Policy_mxJPO;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Access;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Prefix;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.ParameterCache_mxJPO;

public class PolicyDefParser
    extends AbstractParser_mxJPO
{
}
PARSER_END(PolicyDefParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /** first level */
{
    <DESCRIPTION:     "description">      : S_EXPECTED
  | <TYPE:            "type">             : LALL_EXPECTED
  | <FORMAT:          "format">           : LALL_EXPECTED
  | <STORE:           "store">            : S_EXPECTED
  | <DEFAULTFORMAT:   "defaultformat">    : S_EXPECTED
  | <ENFORCE:         "enforce">          : B_EXPECTED
  | <DELIMITER:       "delimiter">        : D_EXPECTED
  | <SEQUENCE:        "sequence">         : S_EXPECTED
  | <MINORSEQUENCE:   "minorsequence">    : S_EXPECTED
  | <MAJORSEQUENCE:   "majorsequence">    : S_EXPECTED
  | <HIDDEN:          "hidden">           : B_EXPECTED
  | <STATE:           "state">            : S_EXPECTED
  | <ALLSTATE:        "allstate">         : DEFAULT
}

TOKEN : /** State and depending signature and trigger Tokens */
{
      <REGISTEREDNAME:          "registeredName">                                       : S_EXPECTED
    | <REVISION:                "revision">                                             : B_EXPECTED
    | <MINORREVISION:           "minorrevision">                                        : B_EXPECTED
    | <MAJORREVISION:           "majorrevision">                                        : B_EXPECTED
    | <VERSION:                 "version">                                              : B_EXPECTED
    | <PROMOTE:                 "promote">                                              : B_EXPECTED
    | <CHECKOUTHISTORY:         "checkouthistory">                                      : B_EXPECTED
    | <PUBLISHED:               "published">                                            : B_EXPECTED
    | <REVOKE:                  "revoke">                                               : DEFAULT
    | <LOGIN:                   "login">                                                : DEFAULT
    | <OWNER:                   "owner">                                                : DEFAULT
    | <PUBLIC:                  "public">                                               : DEFAULT
    | <USER:                    "user">                                                 : S_EXPECTED
    | <KEY:                     "key" >                                                 : S_EXPECTED
    | <FILTER:                  "filter">                                               : S_EXPECTED
    | <LOCALFILTER:             "localfilter">                                          : S_EXPECTED
    | <ACTION:                  "action">                                               : S_EXPECTED
    | <CHECK:                   "check">                                                : S_EXPECTED
    | <OVERRIDE:                "override">                                             : S_EXPECTED
    | <INPUT:                   "input">                                                : S_EXPECTED
    | <TRIGGER:                 "trigger">                                              : S_EXPECTED
    | <APPROVE:                 "approve">                                              : L_EXPECTED
    | <IGNORE:                  "ignore">                                               : L_EXPECTED
    | <REJECT:                  "reject">                                               : L_EXPECTED
    | <BRANCH:                  "branch">                                               : S_EXPECTED
    | <SIGNATURE:               "signature">                                            : S_EXPECTED
    | <ROUTE:                   "route">                                                : LS_EXPECTED
    | <ACCESS:                  "{" ([" ","\t","\n","\r"])* (["a"-"z"]) (["a"-"z"," ","\t","\n","\r"])* "}"> : DEFAULT
    | <ORGANIZATION_ANY:        "any"         ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <ORGANIZATION_SINGLE:     "single"      ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <ORGANIZATION_ANCESTOR:   "ancestor"    ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <ORGANIZATION_DESCENDANT: "descendant"  ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <ORGANIZATION_RELATED:    "related"     ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <PROJECT_ANY:             "any"         ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <PROJECT_SINGLE:          "single"      ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <PROJECT_ANCESTOR:        "ancestor"    ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <PROJECT_DESCENDANT:      "descendant"  ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <PROJECT_RELATED:         "related"     ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <OWNER_ANY:               "any"         ([" ","\t","\n","\r"])+ "owner">          : DEFAULT
    | <OWNER_CONTEXT:           "context"     ([" ","\t","\n","\r"])+ "owner">          : DEFAULT
    | <RESERVE_ANY:             "any"         ([" ","\t","\n","\r"])+ "reserve">        : DEFAULT
    | <RESERVE_CONTEXT:         "context"     ([" ","\t","\n","\r"])+ "reserve">        : DEFAULT
    | <RESERVE_NO:              "no"          ([" ","\t","\n","\r"])+ "reserve">        : DEFAULT
    | <RESERVE_INCLUSIVE:       "inclusive"   ([" ","\t","\n","\r"])+ "reserve">        : DEFAULT
    | <MATURITY_ANY:            "any"         ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_NO:             "no"          ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_PUBLIC:         "public"      ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_PROTECTED:      "protected"   ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_PRIVATE:        "private"     ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_NOTPRIVATE:     "notprivate"  ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_PPP:            "ppp"         ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <CATEGORY_ANY:            "any"         ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_OEM:            "oem"         ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_GOLDPARTNER:    "goldpartner" ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_PARTNER:        "partner"     ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_SUPPLIER:       "supplier"    ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_CUSTOMER:       "customer"    ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_CONTRACTOR:     "contractor"  ([" ","\t","\n","\r"])+ "category">       : DEFAULT
}

/*************************************************** Boolean for Hidden Value */
<B_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}

<B_EXPECTED> TOKEN :
{
      <BOOLEAN_TRUE : (<BOOLEAN_TRUESTR> | "\"" <BOOLEAN_TRUESTR> "\"")> : DEFAULT
    | <BOOLEAN_FALSE : (<BOOLEAN_FALSESTR> | "\"" <BOOLEAN_FALSESTR> "\"")> : DEFAULT
    | <#BOOLEAN_TRUESTR : ["t","T"] ["r","R"] ["u","U"] ["e","E"]>
    | <#BOOLEAN_FALSESTR : ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"]>
}

/*************************************************** Delimiter Chacter */
<D_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}

<D_EXPECTED> TOKEN :
{
      <DELIMITER_CHAR : (<DELIMITER_CHARSTR> | "\"" <DELIMITER_CHARSTR> "\"")>  : DEFAULT
    | <#DELIMITER_CHARSTR : ~["\u0000"-"\u0020","0"-"9","a"-"z","A"-"Z","?","*","'","\"","[","]","(",")"]>
}

/************************************************************* List -> String */
<LS_EXPECTED> SKIP:
{
  " " | "\t" | "\n" | "\r"
}

<LS_EXPECTED> TOKEN : /* List of Strings */
{
      <LS_CURLY_BRACKET_OPEN : "{">    : LS_EXPECTED
    | <LS_CURLY_BRACKET_CLOSE : "}">   : S_EXPECTED
    | <LS_STRING : (<LS_APOSTROPHE>(<LS_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<LS_APOSTROPHE>)> : LS_EXPECTED
    | <LS_SINGLE_STRING : (<LS_CHAR>)+> : LS_EXPECTED
    | <#LS_APOSTROPHE: "\"" >
    | <#LS_CHAR : ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

/************************************************************* String -> List */
<SL_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}

<SL_EXPECTED> TOKEN :
{
      <SL_STRING : (<SL_APOSTROPHE>(<SL_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<SL_APOSTROPHE>)> : L_EXPECTED
    | <SL_SINGLE_STRING : (<SL_CHAR>)+> : L_EXPECTED
    | <#SL_APOSTROPHE: "\"" >
    | <#SL_CHAR : ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

/******************************************************************** String  */
<S_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}

<S_EXPECTED> TOKEN :
{
      <S_STRING : (<S_APOSTROPHE>(<S_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<S_APOSTROPHE>)> : DEFAULT
    | <S_SINGLE_STRING : (<S_CHAR>)+> : DEFAULT
    | <#S_APOSTROPHE: "\"" >
    | <#S_CHAR : ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

/**************************************************************** List or All */
<LALL_EXPECTED> SKIP:
{
  " " | "\t" | "\n" | "\r"
}
<LALL_EXPECTED> TOKEN : /* List of Strings */
{
    < LALL_CURLY_BRACKET_OPEN : "{" >    : L2_EXPECTED
  | < LALL_ALL : "all" > : DEFAULT
}

/*********************************************************************** List */
<L_EXPECTED> SKIP:
{
  " " | "\t" | "\n" | "\r"
}
<L_EXPECTED> TOKEN : /* List of Strings */
{
      <L_CURLY_BRACKET_OPEN : "{">    : L2_EXPECTED
}

<L2_EXPECTED> SKIP:
{
  " " | "\t" | "\n" | "\r"
}
<L2_EXPECTED> TOKEN : /* List of Strings */
{
      <L_CURLY_BRACKET_CLOSE : "}">   : DEFAULT
    | <L_STRING : (<L_APOSTROPHE>(<L_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<L_APOSTROPHE>)> : L2_EXPECTED
    | <L_SINGLE_STRING : (<L_CHAR>)+> : L2_EXPECTED
    | <#L_APOSTROPHE: "\"" >
    | <#L_CHAR : ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
    | <L2_CURLY_BRACKET_OPEN : "{">    : L3_EXPECTED
}

<L3_EXPECTED> TOKEN : /* List of Strings */
{
      <L3_BRACE_STRING  : (<L3_CHAR>)*> : L4_EXPECTED
    | <#L3_CHAR : ~["\u0000"-"\u001f","{","}","\u0100"-"\uffff"]>
}

<L4_EXPECTED> TOKEN : /* List of Strings */
{
      <L4_CURLY_BRACKET_CLOSE : "}">   : L2_EXPECTED
}

/**
 * Parses one complete policy definition.
 *
 * @param _paramCache   parameter cache
 * @param _typeDef      type definition of the policy (to instantiate the
 *                      policy)
 * @param _mxName       MX name of the policy
 */
Policy_mxJPO policy(final ParameterCache_mxJPO _paramCache,
                    final TypeDef_mxJPO _typeDef,
                    final String _mxName)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    final Policy_mxJPO policy = (Policy_mxJPO) _typeDef.newTypeInstance(_mxName);
    String tmp;
} {
    (
        ( <DESCRIPTION>    tmp = sString()     {this.getField(policy, "description").set(tmp);} )
      | ( format(policy) )
      | ( type(policy) )
      | ( <DEFAULTFORMAT>  tmp = sString()     {this.getField(policy, "defaultFormat").set(tmp);} )
      | ( <ENFORCE>        ( <BOOLEAN_TRUE>    {this.getField(policy, "enforce").set(true);}
                           | <BOOLEAN_FALSE>   {this.getField(policy, "enforce").set(false);} ) )
      | ( <DELIMITER>      tmp = sString()     {this.getField(policy, "delimiter").set(tmp);} )
      | ( <SEQUENCE>       tmp = sString()     {this.getField(policy, "minorsequence").set(tmp);} )
      | ( <MINORSEQUENCE>  tmp = sString()     {this.getField(policy, "minorsequence").set(tmp);} )
      | ( <MAJORSEQUENCE>  tmp = sString()     {this.getField(policy, "majorsequence").set(tmp);} )
      | ( <STORE>          tmp = sString()     {this.getField(policy, "store").set(tmp);} )
      | ( <HIDDEN>         ( <BOOLEAN_TRUE>    {this.getField(policy, "hidden").set(true);}
                           | <BOOLEAN_FALSE>   {this.getField(policy, "hidden").set(false);} ) )
      | ( allstate(policy) )
      | ( state(policy) )
    )*
    {
        this.prepareObject(_paramCache, policy);
        return policy;
    }
}

/**
 * Format of a policy definition.
 *
 * @param _policy   current parsed policy
 */
void format(final Policy_mxJPO _policy) :
{
    Set<String> set;
}
{
    <FORMAT>
    ( LOOKAHEAD(2)
        ( <LALL_ALL> {set = new HashSet<String>();set.add("all");} )
      | ( set = lList() )
    )
    {
        this.getField(_policy, "formats").set(set);
    }
}

/**
 * Format of a type definition.
 *
 * @param _policy   current parsed policy
 */
void type(final Policy_mxJPO _policy) :
{
    Set<String> set;
}
{
    <TYPE>
    ( LOOKAHEAD(2)
        ( <LALL_ALL> {set = new HashSet<String>();set.add("all");} )
      | ( set = lList() )
    )
    {
        this.getField(_policy, "types").set(set);
    }
}

/**
 * Parses the all state definition.
 *
 * @param _policy   policy for which the all state definition is parsed
 */
void allstate(final Policy_mxJPO _policy) : {
    final AccessList_mxJPO accessList = this.getField(_policy, "allStateAccess").<AccessList_mxJPO>get();
} {
    <ALLSTATE>
    "{"
        (
            stateOwnerAccess(Prefix.All, accessList)
          | statePublicAccess(Prefix.All, accessList)
          | stateUserAccess(Prefix.All, accessList)
          | ( <REVOKE> ( stateOwnerAccess(Prefix.Revoke, accessList) | statePublicAccess(Prefix.Revoke, accessList) | stateUserAccess(Prefix.Revoke, accessList) ) )
          | ( <LOGIN>  ( stateOwnerAccess(Prefix.Login,  accessList) | statePublicAccess(Prefix.Login,  accessList) | stateUserAccess(Prefix.Login,  accessList) ) )
        )*
    "}"
    {
        this.getField(_policy, "allState").set(true);
    }
}

/**
 * Parses one state definition.
 *
 * @param _policy   policy for which the all state definition is parsed
 */
void state(final Policy_mxJPO _policy) : {
    final Policy_mxJPO.State state = new Policy_mxJPO.State();
    String tmpStr;
    Set<String> tmpSet;
} {
    <STATE> tmpStr = sString() {this.getField(state, "name").set(tmpStr);}
    "{"
        ( (<REGISTEREDNAME>     tmpStr = sString()  {this.appendValue(state, "symbolicNames", tmpStr);})
        | (<REVISION>           ( <BOOLEAN_TRUE>    {this.getField(state, "minorrevisionable").set(true);}
                                | <BOOLEAN_FALSE>   {this.getField(state, "minorrevisionable").set(false);} ) )
        | (<MINORREVISION>      ( <BOOLEAN_TRUE>    {this.getField(state, "minorrevisionable").set(true);}
                                | <BOOLEAN_FALSE>   {this.getField(state, "minorrevisionable").set(false);} ) )
        | (<MAJORREVISION>      ( <BOOLEAN_TRUE>    {this.getField(state, "majorrevisionable").set(true);}
                                | <BOOLEAN_FALSE>   {this.getField(state, "majorrevisionable").set(false);} ) )
        | (<VERSION>            ( <BOOLEAN_TRUE>    {this.getField(state, "versionable").set(true);}
                                | <BOOLEAN_FALSE>   {this.getField(state, "versionable").set(false);} ) )
        | (<PROMOTE>            ( <BOOLEAN_TRUE>    {this.getField(state, "autoPromotion").set(true);}
                                | <BOOLEAN_FALSE>   {this.getField(state, "autoPromotion").set(false);} ) )
        | (<CHECKOUTHISTORY>    ( <BOOLEAN_TRUE>    {this.getField(state, "checkoutHistory").set(true);}
                                | <BOOLEAN_FALSE>   {this.getField(state, "checkoutHistory").set(false);} ) )
        | (<PUBLISHED>          ( <BOOLEAN_TRUE>    {this.getField(state, "published").set(true);}
                                | <BOOLEAN_FALSE>   {this.getField(state, "published").set(false);} ) )
        | stateOwnerAccess(Prefix.All, state)
        | statePublicAccess(Prefix.All, state)
        | stateUserAccess(Prefix.All, state)
        | (<REVOKE> ( stateOwnerAccess(Prefix.Revoke, state) | statePublicAccess(Prefix.Revoke, state) | stateUserAccess(Prefix.Revoke, state) ) )
        | (<LOGIN>  ( stateOwnerAccess(Prefix.Login,  state) | statePublicAccess(Prefix.Login,  state) | stateUserAccess(Prefix.Login,  state) ) )
        | (<ACTION>             tmpStr = sString()  {this.getField(state, "actionProgram").set(tmpStr);}
           <INPUT>              tmpStr = sString()  {this.getField(state, "actionInput").set(tmpStr);})
        | (<CHECK>              tmpStr = sString()  {this.getField(state, "checkProgram").set(tmpStr);}
           <INPUT>              tmpStr = sString()  {this.getField(state, "checkInput").set(tmpStr);})
        | (<ROUTE>              tmpSet = lsList()   {this.getField(state, "routeUsers").set(tmpSet);}
                                tmpStr = sString()  {this.getField(state, "routeMessage").set(tmpStr);})
        | stateTrigger(state)
        | stateSignature(state)
        )*
    "}"
    {
        this.appendValue(_policy, "states", state);
    }
}

/**
 * Parses the access and filter expression for the owner definition.
 *
 * @param _prefix   access filter prefix
 * @param _access   current parsed access definition of the policy
 */
void stateOwnerAccess(final Prefix _prefix, final AccessList_mxJPO _accessList) : {
    final Access access = new Access();
}  {
    ( <OWNER> stateAccessDef(access) )
    {
        this.getField(access, "prefix").set(_prefix);
        this.getField(access, "kind").set("owner");
        ((Collection<Access>)(this.getValue(_accessList, "accessList"))).add(access);
    }
}

/**
 * Parses the access and filter expression for the public definition.
 *
 * @param _prefix   access filter prefix
 * @param _access   current parsed access definition of the policy
 */
void statePublicAccess(final Prefix _prefix, final AccessList_mxJPO _accessList) : {
    final Access access = new Access();
}  {
    ( <PUBLIC> stateAccessDef(access) )
    {
        this.getField(access, "prefix").set(_prefix);
        this.getField(access, "kind").set("public");
        ((Collection<Access>)(this.getValue(_accessList, "accessList"))).add(access);
    }
}

/**
 * Parses the access and filter expression for a user definition.
 *
 * @param _prefix   access filter prefix
 * @param _access   current parsed access definition of the policy
 */
void stateUserAccess(final Prefix _prefix, final AccessList_mxJPO _accessList) : {
    final Access access = new Access();
    String user;
}  {
    ( <USER> user  = sString() stateAccessDef(access) )
    {
        this.getField(access, "prefix").set(_prefix);
        this.getField(access, "kind").set("user");
        this.getField(access, "userRef").set(user);
        ((Collection<Access>)(this.getValue(_accessList, "accessList"))).add(access);
    }
}

void stateAccessDef(final Access _access) : {
    String key = null, filter = null, localfilter = null, organization = null, project = null, owner = null, reserve = null, maturity = null, category = null;
    Token access = null;
} {
    (
          ( <KEY> key = sString())
        | ( <FILTER> filter = sString() )
        | ( <LOCALFILTER> localfilter = sString() )
        | ( access = <ACCESS> )
        | ( <ORGANIZATION_ANY>        {organization = "any";        } )
        | ( <ORGANIZATION_SINGLE>     {organization = "single";     } )
        | ( <ORGANIZATION_ANCESTOR>   {organization = "ancestor";   } )
        | ( <ORGANIZATION_DESCENDANT> {organization = "descendant"; } )
        | ( <ORGANIZATION_RELATED>    {organization = "related";    } )
        | ( <PROJECT_ANY>             {project      = "any";        } )
        | ( <PROJECT_SINGLE>          {project      = "single";     } )
        | ( <PROJECT_ANCESTOR>        {project      = "ancestor";   } )
        | ( <PROJECT_DESCENDANT>      {project      = "descendant"; } )
        | ( <PROJECT_RELATED>         {project      = "related";    } )
        | ( <OWNER_ANY>               {owner        = "any";        } )
        | ( <OWNER_CONTEXT>           {owner        = "context";    } )
        | ( <RESERVE_ANY>             {reserve      = "any";        } )
        | ( <RESERVE_CONTEXT>         {reserve      = "context";    } )
        | ( <RESERVE_NO>              {reserve      = "no";         } )
        | ( <RESERVE_INCLUSIVE>       {reserve      = "inclusive";  } )
        | ( <MATURITY_ANY>            {maturity     = "any";        } )
        | ( <MATURITY_NO>             {maturity     = "no";         } )
        | ( <MATURITY_PUBLIC>         {maturity     = "public";     } )
        | ( <MATURITY_PROTECTED>      {maturity     = "protected";  } )
        | ( <MATURITY_PRIVATE>        {maturity     = "private";    } )
        | ( <MATURITY_NOTPRIVATE>     {maturity     = "notprivate"; } )
        | ( <MATURITY_PPP>            {maturity     = "ppp";        } )
        | ( <CATEGORY_ANY>            {category     = "any";         } )
        | ( <CATEGORY_OEM>            {category     = "oem";         } )
        | ( <CATEGORY_GOLDPARTNER>    {category     = "goldpartner"; } )
        | ( <CATEGORY_PARTNER>        {category     = "partner";     } )
        | ( <CATEGORY_SUPPLIER>       {category     = "supplier";    } )
        | ( <CATEGORY_CUSTOMER>       {category     = "customer";    } )
        | ( <CATEGORY_CONTRACTOR>     {category     = "contractor";  } )
    )*
    {
        this.getField(_access, "key").set(key);
        this.getField(_access, "filter").set(filter);
        this.getField(_access, "localfilter").set(localfilter);
        this.getField(_access, "organization").set(organization);
        this.getField(_access, "project").set(project);
        this.getField(_access, "owner").set(owner);
        this.getField(_access, "reserve").set(reserve);
        this.getField(_access, "maturity").set(maturity);
        this.getField(_access, "category").set(category);

        if (access == null)  {
            this.getField(_access, "access").set(new HashSet<String>());
        } else  {
            final String tmp = access.image
                    .replaceFirst("^\\{", "").replaceFirst("\\}$", "")  // remove {}
                    .replaceAll("(\t)|(\n)", " ")                       // replace tabs, new lines
                    .replaceAll("( )+", " ")                            // multiple spaces => one space
                    .trim();                                            // remove trailing spaces
            this.getField(_access, "access").set(new HashSet<String>(Arrays.asList(tmp.split(" "))));
        }
    }
}

void stateTrigger(final Policy_mxJPO.State _state) : {
    final Trigger trigger = new Trigger();
    String tmp;
} {
    <TRIGGER> tmp = sString()       {this.setValue(trigger, "eventType", tmp);}
            ( <ACTION>              {this.setValue(trigger, "kind", "action");}
            | <CHECK>               {this.setValue(trigger, "kind", "check");}
            | <OVERRIDE>            {this.setValue(trigger, "kind", "override");})
            tmp = sString()         {this.setValue(trigger, "program", tmp);}
            <INPUT> tmp = sString() {this.setValue(trigger, "arguments", tmp);}
    {
        this.appendValue(this.getValue(_state, "triggers"), "triggersStack", trigger);
    }
}

void stateSignature(final Policy_mxJPO.State _state) : {
    final Policy_mxJPO.Signature signature = new Policy_mxJPO.Signature();
    String tmpStr;
    Set<String> tmpSet;
} {
    <SIGNATURE> tmpStr = sString() {this.getField(signature, "name").set(tmpStr);}
    "{"
        ( (<BRANCH> tmpStr = sString()  {this.getField(signature, "branch").set(tmpStr);})
        | (<APPROVE> tmpSet = lList()   {this.getField(signature, "approverUsers").set(tmpSet);})
        | (<IGNORE> tmpSet = lList()    {this.getField(signature, "ignoreUsers").set(tmpSet);})
        | (<REJECT> tmpSet = lList()    {this.getField(signature, "rejectUsers").set(tmpSet);})
        | (<FILTER> tmpStr = sString()  {this.getField(signature, "filter").set(tmpStr);})) *
    "}"
    {
        this.appendValue(_state, "signatures", signature);
    }
}

Set<String> lsList() :  {
    Token tmp;
    Set<String> ret = new HashSet<String>();
}  {
    (
        <LS_CURLY_BRACKET_OPEN>
            (
                (tmp = <LS_STRING>)         {ret.add(this.getString(tmp.image));}
                |
                (tmp = <LS_SINGLE_STRING>)  {ret.add(this.getSingle(tmp.image));}
            )*
        <LS_CURLY_BRACKET_CLOSE>
    )
    {
        return ret;
    }
}

Set<String> lList() :  {
    Token tmp;
    Set<String> ret = new HashSet<String>();
}  {
    (
        ( <L_CURLY_BRACKET_OPEN> | <LALL_CURLY_BRACKET_OPEN> )
            (
                (tmp = <L_STRING>) {ret.add(this.getString(tmp.image));}
                |
                (tmp = <L_SINGLE_STRING>) {ret.add(this.getSingle(tmp.image));}
                |
                <L2_CURLY_BRACKET_OPEN>
                    (tmp = <L3_BRACE_STRING>)
                    {ret.add(tmp.image);}
                <L4_CURLY_BRACKET_CLOSE>
            )*
        <L_CURLY_BRACKET_CLOSE>
    )
    {
        return ret;
    }
}

/**
 * Evaluates a simple string where a list must follow.
 *
 * @return evaluated simple string
 */
String slString() : {
    Token tmp;
    String ret;
} {
    (
        (tmp = <SL_STRING>)         {ret = this.getString(tmp.image);}
        |
        (tmp = <SL_SINGLE_STRING>)  {ret = this.getSingle(tmp.image);}
    )
    {
        return ret;
    }
}

/**
 * Evaluates a simple string.
 *
 * @return evaluated simple string
 */
String sString() : {
    Token tmp;
    String ret;
} {
    (
          (tmp = <S_STRING>)          {ret = this.getString(tmp.image);}
        | (tmp = <S_SINGLE_STRING>)   {ret = this.getSingle(tmp.image);}
        | (tmp = <DELIMITER_CHAR>)    {ret = this.getSingle(tmp.image);}
    )
    {
        return ret;
    }
}
