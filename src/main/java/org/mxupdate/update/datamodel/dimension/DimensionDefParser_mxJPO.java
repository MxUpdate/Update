/* Generated By:JavaCC: Do not edit this line. DimensionDefParser.java */
package org.mxupdate.update.datamodel.dimension;

import java.lang.reflect.InvocationTargetException;
import java.io.StringReader;
import java.util.Collection;
import java.util.Set;

import org.mxupdate.mapping.TypeDef_mxJPO;
import org.mxupdate.update.datamodel.Dimension_mxJPO;
import org.mxupdate.update.datamodel.Dimension_mxJPO.Unit;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;
import org.mxupdate.update.util.ParameterCache_mxJPO;

public class DimensionDefParser_mxJPO
    extends AbstractParser_mxJPO implements DimensionDefParserConstants_mxJPO {

/**
 * Parses one complete dimension definition.
 *
 * @param _paramCache   parameter cache
 * @param _typeDef      type definition of the dimension (to instanciate the
 *                      dimension)
 * @param _mxName       MX name of the dimension
 */
  final public Dimension_mxJPO dimension(final ParameterCache_mxJPO _paramCache,
                          final TypeDef_mxJPO _typeDef,
                          final String _mxName) throws ParseException_mxJPO, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
    final Dimension_mxJPO dimension = (Dimension_mxJPO) _typeDef.newTypeInstance(_mxName);
    Token_mxJPO tmp;
    Set<String> set;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
      case HIDDEN:
      case UNIT:
        ;
        break;
      default:
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
        jj_consume_token(DESCRIPTION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESCRIPTION_STRING:
          tmp = jj_consume_token(DESCRIPTION_STRING);
                                                         this.setValue(dimension, "description", this.getString(tmp.image));
          break;
        case DESCRIPTION_SINGLE:
          tmp = jj_consume_token(DESCRIPTION_SINGLE);
                                                         this.setValue(dimension, "description", this.getSingle(tmp.image));
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case HIDDEN:
        jj_consume_token(HIDDEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HIDDEN_BOOLEAN_TRUE:
          jj_consume_token(HIDDEN_BOOLEAN_TRUE);
                                                         this.setValue(dimension, "hidden", true);
          break;
        case HIDDEN_BOOLEAN_FALSE:
          jj_consume_token(HIDDEN_BOOLEAN_FALSE);
                                                         this.setValue(dimension, "hidden", false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case UNIT:
        unit(dimension);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
        this.prepareObject(_paramCache, dimension);
        {if (true) return dimension;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses for a dimension one unit definition.
 *
 * @param _dimension    dimension instance for which the unit must parsed
 */
  final public void unit(final Dimension_mxJPO _dimension) throws ParseException_mxJPO {
    final Unit unit = new Unit();
    Token_mxJPO tmpToken;
    String tmpStr;
    jj_consume_token(UNIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNITNAME_STRING:
      tmpToken = jj_consume_token(UNITNAME_STRING);
                                          this.setValue(unit, "name", this.getString(tmpToken.image));
      break;
    case UNITNAME_SINGLE:
      tmpToken = jj_consume_token(UNITNAME_SINGLE);
                                          this.setValue(unit, "name", this.getSingle(tmpToken.image));
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException_mxJPO();
    }
    jj_consume_token(UNITDEF_START);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNITDEF_DEFAULT:
      case UNITDEF_DESCRIPTION:
      case UNITDEF_LABEL:
      case UNITDEF_MULTIPLIER:
      case UNITDEF_OFFSET:
      case UNITDEF_SETTING:
      case UNITDEF_PROPERTY:
      case UNITDEF_SYSTEM:
        ;
        break;
      default:
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNITDEF_DEFAULT:
        jj_consume_token(UNITDEF_DEFAULT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNITDEF_BOOLEAN_TRUE:
          jj_consume_token(UNITDEF_BOOLEAN_TRUE);
                                                                         this.setValue(unit, "defaultUnit", true);
          break;
        case UNITDEF_BOOLEAN_FALSE:
          jj_consume_token(UNITDEF_BOOLEAN_FALSE);
                                                                         this.setValue(unit, "defaultUnit", false);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        break;
      case UNITDEF_DESCRIPTION:
        jj_consume_token(UNITDEF_DESCRIPTION);
        tmpStr = uvString();
                                                                         this.setValue(unit, "description", tmpStr);
        break;
      case UNITDEF_LABEL:
        jj_consume_token(UNITDEF_LABEL);
        tmpStr = uvString();
                                                                         this.setValue(unit, "label", tmpStr);
        break;
      case UNITDEF_MULTIPLIER:
        jj_consume_token(UNITDEF_MULTIPLIER);
        tmpToken = jj_consume_token(UNITDEF_DOUBLE_DOUBLE);
                                                                         this.setValue(unit, "multiplier", Double.parseDouble(tmpToken.image));
        break;
      case UNITDEF_OFFSET:
        jj_consume_token(UNITDEF_OFFSET);
        tmpToken = jj_consume_token(UNITDEF_DOUBLE_DOUBLE);
                                                                         this.setValue(unit, "offset", Double.parseDouble(tmpToken.image));
        break;
      case UNITDEF_SETTING:
        unitSetting(unit);
        break;
      case UNITDEF_PROPERTY:
        unitProperty(unit);
        break;
      case UNITDEF_SYSTEM:
        unitSystem(unit);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
    jj_consume_token(UNITDEF_END);
        this.appendValue(_dimension, "units", unit);
  }

/**
 * Parses one setting for a unit definition. The setting is stored on the
 * dimension as property where the name of the property is the key of the
 * setting with % as prefix.
 *
 * @param _unit     unit instance for which the setting must be parsed
 */
  final public void unitSetting(final Unit _unit) throws ParseException_mxJPO {
    Token_mxJPO tmp;
    final String key, value;
    jj_consume_token(UNITDEF_SETTING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNITDEF_STRINGSTRING_STRING:
      tmp = jj_consume_token(UNITDEF_STRINGSTRING_STRING);
                                               key = this.getString(tmp.image);
      break;
    case UNITDEF_STRINGSTRING_SINGLE:
      tmp = jj_consume_token(UNITDEF_STRINGSTRING_SINGLE);
                                               key = this.getSingle(tmp.image);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException_mxJPO();
    }
    value = uvString();
        final AdminProperty prop = new AdminProperty();
        this.setValue(prop, "name", "%" + key);
        this.setValue(prop, "value", value);
        this.appendValue(_unit, "properties", prop);
  }

/**
 * Parses one property for a unit definition.
 *
 * @param _unit     unit instance for which the property must be parsed
 */
  final public void unitProperty(final Unit _unit) throws ParseException_mxJPO {
    Token_mxJPO tmp;
    String name = null;
    String value = null;
    String toType = null;
    String toName = null;
    jj_consume_token(UNITDEF_PROPERTY);
    name = uvString();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNITDEF_PROPERTYVAL:
      case UNITDEF_PROPERTYTO:
        ;
        break;
      default:
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNITDEF_PROPERTYVAL:
        jj_consume_token(UNITDEF_PROPERTYVAL);
        value = uvString();
        break;
      case UNITDEF_PROPERTYTO:
        jj_consume_token(UNITDEF_PROPERTYTO);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNITDEF_STRINGSTRING_STRING:
          tmp = jj_consume_token(UNITDEF_STRINGSTRING_STRING);
                                                           toType = this.getString(tmp.image);
          break;
        case UNITDEF_STRINGSTRING_SINGLE:
          tmp = jj_consume_token(UNITDEF_STRINGSTRING_SINGLE);
                                                           toType = this.getSingle(tmp.image);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException_mxJPO();
        }
        toName = uvString();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException_mxJPO();
      }
    }
        final AdminProperty prop = new AdminProperty();
        this.setValue(prop, "name", name);
        this.setValue(prop, "value", value);
        this.setValue(prop, "refAdminType", toType);
        this.setValue(prop, "refAdminName", toName);
        this.appendValue(_unit, "properties", prop);
  }

/**
 * Parses the system information for a unit definition. The system information
 * is stored as property where the referenced admin type is set to unit and the
 * referenced admin name is the system unit.
 *
 * @param _unit     unit instance for which the system must be parsed
 */
  final public void unitSystem(final Unit _unit) throws ParseException_mxJPO {
    Token_mxJPO tmp;
    String name;
    String unit;
    jj_consume_token(UNITDEF_SYSTEM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNITDEF_SYSTEMNAME_STRING:
      tmp = jj_consume_token(UNITDEF_SYSTEMNAME_STRING);
                                             name = this.getString(tmp.image);
      break;
    case UNITDEF_SYSTEMNAME_SINGLE:
      tmp = jj_consume_token(UNITDEF_SYSTEMNAME_SINGLE);
                                             name = this.getSingle(tmp.image);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException_mxJPO();
    }
    jj_consume_token(UNITDEF_SYSTEMDEF_TO);
    jj_consume_token(UNITDEF_SYSTEMDEF_UNIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNITDEF_SYSTEMUNIT_STRING:
      tmp = jj_consume_token(UNITDEF_SYSTEMUNIT_STRING);
                                             unit = this.getString(tmp.image);
      break;
    case UNITDEF_SYSTEMUNIT_SINGLE:
      tmp = jj_consume_token(UNITDEF_SYSTEMUNIT_SINGLE);
                                             unit = this.getSingle(tmp.image);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException_mxJPO();
    }
        final AdminProperty prop = new AdminProperty();
        this.setValue(prop, "name", name);
        this.setValue(prop, "refAdminType", "unit");
        this.setValue(prop, "refAdminName", unit);
        this.appendValue(this.getValue(_unit, "properties"), "propertiesStack", prop);
  }

/**
 * Evaluates a simple string.
 *
 * @return evaluated simple string
 */
  final public String uvString() throws ParseException_mxJPO {
    Token_mxJPO tmp;
    String ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNITDEF_STRING_STRING:
      tmp = jj_consume_token(UNITDEF_STRING_STRING);
                                         ret = this.getString(tmp.image);
      break;
    case UNITDEF_STRING_SINGLE:
      tmp = jj_consume_token(UNITDEF_STRING_SINGLE);
                                         ret = this.getSingle(tmp.image);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException_mxJPO();
    }
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public DimensionDefParserTokenManager_mxJPO token_source;
  SimpleCharStream_mxJPO jj_input_stream;
  /** Current token. */
  public Token_mxJPO token;
  /** Next token. */
  public Token_mxJPO jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public DimensionDefParser_mxJPO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DimensionDefParser_mxJPO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream_mxJPO(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DimensionDefParserTokenManager_mxJPO(jj_input_stream);
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Constructor. */
  public DimensionDefParser_mxJPO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream_mxJPO(stream, 1, 1);
    token_source = new DimensionDefParserTokenManager_mxJPO(jj_input_stream);
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public DimensionDefParser_mxJPO(DimensionDefParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(DimensionDefParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token_mxJPO();
    jj_ntk = -1;
  }

  private Token_mxJPO jj_consume_token(int kind) throws ParseException_mxJPO {
    Token_mxJPO oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token_mxJPO getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token_mxJPO getToken(int index) {
    Token_mxJPO t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException_mxJPO generateParseException() {
    Token_mxJPO errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException_mxJPO("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
